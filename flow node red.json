[
    {
        "id": "a9265bf97bf9ded4",
        "type": "tab",
        "label": "Flujo 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "58d24b6c6b4a0334",
        "type": "mqtt in",
        "z": "a9265bf97bf9ded4",
        "name": "Sensor PIR",
        "topic": "pomodoro/sensor/pir",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9260a17b9850f466",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 530,
        "y": 560,
        "wires": [
            [
                "00556c5601b5270c",
                "d66ac65e1c94f77d"
            ]
        ]
    },
    {
        "id": "b7bd2d41422afdd5",
        "type": "mqtt in",
        "z": "a9265bf97bf9ded4",
        "name": "Sensor distancia",
        "topic": "pomodoro/sensor/distance",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "9260a17b9850f466",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 540,
        "y": 700,
        "wires": [
            [
                "00556c5601b5270c",
                "b01a295f9d1a9d44"
            ]
        ]
    },
    {
        "id": "f3e03b4d2baf2288",
        "type": "inject",
        "z": "a9265bf97bf9ded4",
        "name": "Tick 1s",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "TICK_1S",
        "payload": "",
        "payloadType": "date",
        "x": 520,
        "y": 800,
        "wires": [
            [
                "00556c5601b5270c"
            ]
        ]
    },
    {
        "id": "00556c5601b5270c",
        "type": "function",
        "z": "a9265bf97bf9ded4",
        "name": "function 1",
        "func": "// ============================================================\n// SISTEMA POMODORO AUTOMÁTICO CON DETECCIÓN DE PRESENCIA\n// Versión Mejorada con:\n// - Long breaks cada 4 ciclos\n// - Reset diario automático\n// - Estadísticas de productividad\n// - Modo No Molestar\n// ============================================================\n\n// === CONFIGURACIÓN BÁSICA ===\nlet WORK_MINUTES = flow.get(\"WORK_MINUTES\") || 25;\nlet BREAK_MINUTES = flow.get(\"BREAK_MINUTES\") || 5;\nlet LONG_BREAK_MINUTES = flow.get(\"LONG_BREAK_MINUTES\") || 15;\nlet WORK_SECONDS = WORK_MINUTES * 60;\nlet BREAK_SECONDS = BREAK_MINUTES * 60;\nlet LONG_BREAK_SECONDS = LONG_BREAK_MINUTES * 60;\n\nconst CYCLES_BEFORE_LONG_BREAK = 4;     // Pomodoros antes de descanso largo\nconst DIST_UMBRAL_CM = 60;\nconst CONFIRM_COUNT = 3;\nconst BREAK_GRACE_SECONDS = 10;\n\n// === RECUPERAR ESTADO ===\nlet state = flow.get(\"pomodoroState\") || \"IDLE\";\nlet presence = flow.get(\"pomodoroPresence\") || false;\nlet presentStreak = flow.get(\"presentStreak\") || 0;\nlet absentStreak = flow.get(\"absentStreak\") || 0;\nlet workRemaining = flow.get(\"workRemaining\") || 0;\nlet breakRemaining = flow.get(\"breakRemaining\") || 0;\nlet breakPaused = flow.get(\"breakPaused\") || false;\nlet breakPresenceHold = flow.get(\"breakPresenceHold\") || 0;\nlet isLongBreak = flow.get(\"isLongBreak\") || false;\n\n// === SENSORES ===\nlet lastPir = flow.get(\"lastPir\") || false;\nlet lastDistance = flow.get(\"lastDistance\") || 999;\n\n// === ESTADÍSTICAS Y CICLOS ===\nlet todayDate = new Date().toISOString().split('T')[0]; // YYYY-MM-DD\nlet lastDate = flow.get(\"lastStatsDate\") || todayDate;\n\n// Reset diario automático\nif (lastDate !== todayDate) {\n    flow.set(\"cyclesToday\", 0);\n    flow.set(\"minutesWorkedToday\", 0);\n    flow.set(\"lastStatsDate\", todayDate);\n}\n\nlet cyclesToday = flow.get(\"cyclesToday\") || 0;\nlet cyclesSinceBreak = flow.get(\"cyclesSinceBreak\") || 0;\nlet minutesWorkedToday = flow.get(\"minutesWorkedToday\") || 0;\n\n// === MODO NO MOLESTAR ===\nlet doNotDisturb = flow.get(\"doNotDisturb\") || false;\nlet dndUntil = flow.get(\"dndUntil\") || 0; // timestamp\n\n// === MENSAJES DE SALIDA ===\nlet msgLcd = null;\nlet msgBuzzer = null;\nlet msgUi = null;\nlet msgGauge = null;\nlet msgCycles = null;\nlet msgNotification = null;\n\n// ============================================================\n// IDENTIFICAR TIPO DE MENSAJE\n// ============================================================\nlet messageType = \"UNKNOWN\";\n\nif (typeof msg.topic === 'string') {\n    if (msg.topic === \"CONFIG_WORK\" || msg.topic === \"CONFIG_BREAK\" ||\n        msg.topic === \"CONFIG_LONG_BREAK\" || msg.topic === \"CONFIG_BUZZER\") {\n        messageType = \"CONFIG\";\n    } else if (msg.topic.startsWith(\"pomodoro/sensor/\")) {\n        messageType = \"SENSOR\";\n    } else if (msg.topic === \"TICK_1S\") {\n        messageType = \"TICK\";\n    }\n}\n\nif (typeof msg.payload === 'string' && msg.payload.startsWith(\"CMD_\")) {\n    messageType = \"COMMAND\";\n}\n\n// ============================================================\n// 1. CONFIGURACIÓN\n// ============================================================\nif (messageType === \"CONFIG\") {\n    if (msg.topic === \"CONFIG_WORK\") {\n        let minutos = parseInt(msg.payload);\n        if (!isNaN(minutos) && minutos > 0 && minutos <= 120) {\n            flow.set(\"WORK_MINUTES\", minutos);\n            WORK_MINUTES = minutos;\n            WORK_SECONDS = minutos * 60;\n            if (state === \"IDLE\") {\n                msgNotification = { payload: `⚙️ Trabajo: ${minutos} min` };\n            }\n        }\n    }\n    else if (msg.topic === \"CONFIG_BREAK\") {\n        let minutos = parseInt(msg.payload);\n        if (!isNaN(minutos) && minutos > 0 && minutos <= 60) {\n            flow.set(\"BREAK_MINUTES\", minutos);\n            BREAK_MINUTES = minutos;\n            BREAK_SECONDS = minutos * 60;\n            if (state === \"IDLE\") {\n                msgNotification = { payload: `⚙️ Descanso corto: ${minutos} min` };\n            }\n        }\n    }\n    else if (msg.topic === \"CONFIG_LONG_BREAK\") {\n        let minutos = parseInt(msg.payload);\n        if (!isNaN(minutos) && minutos > 0 && minutos <= 60) {\n            flow.set(\"LONG_BREAK_MINUTES\", minutos);\n            LONG_BREAK_MINUTES = minutos;\n            LONG_BREAK_SECONDS = minutos * 60;\n            if (state === \"IDLE\") {\n                msgNotification = { payload: `⚙️ Descanso largo: ${minutos} min` };\n            }\n        }\n    }\n    else if (msg.topic === \"CONFIG_BUZZER\") {\n        let enabled = Boolean(msg.payload);\n        flow.set(\"buzzerEnabled\", enabled);\n        msgNotification = { payload: `🔔 Buzzer: ${enabled ? \"activado\" : \"silenciado\"}` };\n    }\n}\n\n// ============================================================\n// 2. COMANDOS\n// ============================================================\nelse if (messageType === \"COMMAND\") {\n    if (msg.payload === \"CMD_START\") {\n        if (state === \"IDLE\") {\n            startWork();\n            presence = true;\n            presentStreak = CONFIRM_COUNT;\n            absentStreak = 0;\n            flow.set(\"pomodoroPresence\", true);\n            flow.set(\"presentStreak\", presentStreak);\n            flow.set(\"absentStreak\", 0);\n            msgNotification = { payload: \"🍅 Ciclo iniciado\" };\n        }\n    }\n    else if (msg.payload === \"CMD_CANCEL\") {\n        // Guardar trabajo parcial en stats\n        if (state === \"WORK\" && workRemaining < WORK_SECONDS) {\n            let workedSeconds = WORK_SECONDS - workRemaining;\n            minutesWorkedToday += Math.floor(workedSeconds / 60);\n        }\n\n        state = \"IDLE\";\n        workRemaining = 0;\n        breakRemaining = 0;\n        presence = false;\n        presentStreak = 0;\n        absentStreak = 0;\n        breakPaused = false;\n        breakPresenceHold = 0;\n        isLongBreak = false;\n\n        flow.set(\"pomodoroPresence\", false);\n        flow.set(\"presentStreak\", 0);\n        flow.set(\"absentStreak\", 0);\n        flow.set(\"isLongBreak\", false);\n\n        sendLcd(\"Cancelado\", \"Acércate...\");\n        sendBuzzer(100, 50, 1);\n        msgNotification = { payload: \"❌ Ciclo cancelado\" };\n    }\n    else if (msg.payload === \"CMD_PAUSE\") {\n        if (state === \"WORK\") {\n            state = \"EARLY_LEAVE\";\n            sendLcd(\"Pausado\", formatTime(workRemaining));\n            sendBuzzer(300, 300, 0);\n            msgNotification = { payload: \"⏸️ Pausado\" };\n        }\n        else if (state === \"EARLY_LEAVE\") {\n            state = \"WORK\";\n            presence = true;\n            flow.set(\"pomodoroPresence\", true);\n            sendLcd(\"Trabaja\", \"Restan \" + formatTime(workRemaining));\n            sendBuzzer(0, 0, 0);\n            msgNotification = { payload: \"▶️ Reanudado\" };\n        }\n    }\n    else if (msg.payload === \"CMD_DND_15\") {\n        // No molestar por 15 minutos\n        doNotDisturb = true;\n        dndUntil = Date.now() + (15 * 60 * 1000);\n        flow.set(\"doNotDisturb\", true);\n        flow.set(\"dndUntil\", dndUntil);\n        msgNotification = { payload: \"🔕 Silencio por 15 min\" };\n        sendBuzzer(0, 0, 0); // Detener alarmas actuales\n    }\n    else if (msg.payload === \"CMD_DND_OFF\") {\n        doNotDisturb = false;\n        flow.set(\"doNotDisturb\", false);\n        flow.set(\"dndUntil\", 0);\n        msgNotification = { payload: \"🔔 Sonido activado\" };\n    }\n    else if (msg.payload === \"CMD_SKIP_BREAK\") {\n        // Saltar descanso actual\n        if (state === \"BREAK\") {\n            state = \"IDLE\";\n            breakRemaining = 0;\n            sendLcd(\"Listo\", \"Acércate\");\n            msgNotification = { payload: \"⏭️ Descanso omitido\" };\n        }\n    }\n}\n\n// ============================================================\n// 3. SENSORES\n// ============================================================\nelse if (messageType === \"SENSOR\") {\n    if (msg.topic === \"pomodoro/sensor/pir\") {\n        lastPir = (msg.payload === \"true\" || msg.payload === true);\n        flow.set(\"lastPir\", lastPir);\n    }\n    else if (msg.topic === \"pomodoro/sensor/distance\") {\n        let dist = parseFloat(msg.payload);\n        lastDistance = (isNaN(dist) || dist < 0) ? 999 : dist;\n        flow.set(\"lastDistance\", lastDistance);\n    }\n\n    // === DEBOUNCE ===\n    let nowPresent = (lastPir && lastDistance > 0 && lastDistance < DIST_UMBRAL_CM);\n\n    if (nowPresent) {\n        presentStreak++;\n        absentStreak = 0;\n\n        if (!presence && presentStreak >= CONFIRM_COUNT) {\n            presence = true;\n            onPresenceConfirmed();\n        }\n    } else {\n        absentStreak++;\n        presentStreak = 0;\n\n        if (presence && absentStreak >= CONFIRM_COUNT) {\n            presence = false;\n            onAbsenceConfirmed();\n        }\n    }\n\n    flow.set(\"presentStreak\", presentStreak);\n    flow.set(\"absentStreak\", absentStreak);\n    flow.set(\"pomodoroPresence\", presence);\n}\n\n// ============================================================\n// 4. TICK (1 segundo)\n// ============================================================\nelse if (messageType === \"TICK\") {\n    // Verificar si expiró el modo No Molestar\n    if (doNotDisturb && Date.now() >= dndUntil) {\n        doNotDisturb = false;\n        flow.set(\"doNotDisturb\", false);\n        msgNotification = { payload: \"🔔 Fin del silencio\" };\n    }\n\n    switch (state) {\n        case \"WORK\":\n            if (presence && workRemaining > 0) {\n                workRemaining--;\n\n                // Actualizar stats cada minuto\n                if (workRemaining % 60 === 0) {\n                    minutesWorkedToday++;\n                    flow.set(\"minutesWorkedToday\", minutesWorkedToday);\n                }\n\n                if (workRemaining % 5 === 0 || workRemaining < 10) {\n                    sendLcd(\"Trabaja\", \"Restan \" + formatTime(workRemaining));\n                }\n\n                if (workRemaining === 0) {\n                    sendLcd(\"¡Bien!\", \"Hora de descansar\");\n                    sendBuzzer(200, 200, 2);\n                }\n            }\n            break;\n\n        case \"BREAK\":\n            if (presence) {\n                if (breakPresenceHold < BREAK_GRACE_SECONDS) {\n                    breakPresenceHold++;\n\n                    if (breakPresenceHold === Math.floor(BREAK_GRACE_SECONDS / 2)) {\n                        let remaining = BREAK_GRACE_SECONDS - breakPresenceHold;\n                        sendLcd(\"¡Aléjate!\", `(${remaining}s)`);\n                    }\n\n                    if (breakPresenceHold === BREAK_GRACE_SECONDS) {\n                        breakPaused = true;\n                        sendLcd(\"Descanso pausado\", \"Aléjate\");\n                        sendBuzzer(300, 300, 0);\n                        msgNotification = { payload: \"⚠️ Descanso pausado\" };\n                    }\n                }\n            } else {\n                breakPresenceHold = 0;\n            }\n\n            if (!breakPaused && breakRemaining > 0) {\n                breakRemaining--;\n\n                if (breakRemaining % 5 === 0 || breakRemaining < 10) {\n                    let label = isLongBreak ? \"Descanso largo\" : \"Descanso\";\n                    sendLcd(label, formatTime(breakRemaining));\n                }\n\n                if (breakRemaining === 0) {\n                    sendLcd(\"¡Listo!\", \"A trabajar\");\n                    sendBuzzer(150, 150, 3);\n                    state = \"IDLE\";\n                    presence = false;\n                    isLongBreak = false;\n                    flow.set(\"pomodoroPresence\", false);\n                    flow.set(\"isLongBreak\", false);\n\n                    cyclesToday++;\n                    cyclesSinceBreak = 0; // Reset tras completar descanso\n                    flow.set(\"cyclesToday\", cyclesToday);\n                    flow.set(\"cyclesSinceBreak\", cyclesSinceBreak);\n\n                    msgNotification = { payload: `✅ Ciclo ${cyclesToday} completado` };\n                }\n            }\n            break;\n\n        case \"EARLY_LEAVE\":\n        case \"IDLE\":\n        default:\n            break;\n    }\n}\n\n// ============================================================\n// EVENTOS DE TRANSICIÓN\n// ============================================================\nfunction onPresenceConfirmed() {\n    switch (state) {\n        case \"IDLE\":\n            if (workRemaining === 0 && breakRemaining === 0) {\n                startWork();\n                msgNotification = { payload: \"🍅 Auto-inicio\" };\n            }\n            break;\n\n        case \"EARLY_LEAVE\":\n            state = \"WORK\";\n            sendLcd(\"¡Bien!\", \"Restan \" + formatTime(workRemaining));\n            sendBuzzer(0, 0, 0);\n            msgNotification = { payload: \"✅ Reanudado\" };\n            break;\n\n        case \"BREAK\":\n            if (breakPresenceHold === 0) {\n                sendLcd(\"Aléjate\", \"Necesitas descansar\");\n                sendBuzzer(300, 300, 2);\n            }\n            break;\n\n        case \"WORK\":\n        default:\n            break;\n    }\n}\n\nfunction onAbsenceConfirmed() {\n    switch (state) {\n        case \"WORK\":\n            if (workRemaining > 0) {\n                state = \"EARLY_LEAVE\";\n                sendLcd(\"¿Dónde estás?\", formatTime(workRemaining));\n                sendBuzzer(300, 300, 0);\n                msgNotification = { payload: \"⚠️ Pausado por ausencia\" };\n            } else {\n                // Trabajo completo, decidir tipo de descanso\n                cyclesSinceBreak++;\n                flow.set(\"cyclesSinceBreak\", cyclesSinceBreak);\n\n                if (cyclesSinceBreak >= CYCLES_BEFORE_LONG_BREAK) {\n                    startBreak(true); // Long break\n                } else {\n                    startBreak(false); // Short break\n                }\n            }\n            break;\n\n        case \"BREAK\":\n            if (breakPaused) {\n                breakPaused = false;\n                sendLcd(\"Descanso\", formatTime(breakRemaining));\n                sendBuzzer(0, 0, 0);\n                msgNotification = { payload: \"✅ Descanso reanudado\" };\n            }\n            breakPresenceHold = 0;\n            break;\n\n        case \"EARLY_LEAVE\":\n        case \"IDLE\":\n            break;\n    }\n}\n\n// ============================================================\n// FUNCIONES DE AYUDA\n// ============================================================\nfunction startWork() {\n    workRemaining = WORK_SECONDS;\n    state = \"WORK\";\n    sendLcd(\"¡Trabaja!\", formatTime(workRemaining));\n    sendBuzzer(150, 0, 1);\n}\n\nfunction startBreak(isLong) {\n    isLongBreak = isLong;\n    breakRemaining = isLong ? LONG_BREAK_SECONDS : BREAK_SECONDS;\n    breakPaused = false;\n    breakPresenceHold = 0;\n    state = \"BREAK\";\n\n    flow.set(\"isLongBreak\", isLong);\n\n    let label = isLong ? \"¡Descanso largo!\" : \"Descanso\";\n    let cycleInfo = isLong ? `(${cyclesSinceBreak} ciclos)` : \"\";\n\n    sendLcd(label, \"Aléjate \" + formatTime(breakRemaining));\n    sendBuzzer(200, 200, isLong ? 3 : 2);\n\n    if (isLong) {\n        msgNotification = { payload: `🎉 ¡Descanso largo! ${LONG_BREAK_MINUTES} min ${cycleInfo}` };\n    }\n}\n\nfunction sendLcd(l1, l2) {\n    msgLcd = { payload: { \"l1\": l1, \"l2\": l2 } };\n}\n\nfunction sendBuzzer(on_ms, off_ms, repeat) {\n    // Jerarquía de silencio:\n    // 1. Modo No Molestar (temporal) tiene prioridad\n    // 2. Switch de Buzzer (permanente) segunda prioridad\n\n    if (doNotDisturb) {\n        // DND activo: silencio total (temporal)\n        msgBuzzer = { payload: { \"on_ms\": 0, \"off_ms\": 0, \"repeat\": 0 } };\n        return;\n    }\n\n    let buzzerEnabled = flow.get(\"buzzerEnabled\") ?? true;\n    if (!buzzerEnabled) {\n        // Buzzer deshabilitado: silencio permanente\n        msgBuzzer = { payload: { \"on_ms\": 0, \"off_ms\": 0, \"repeat\": 0 } };\n        return;\n    }\n\n    // Ambos habilitados: hacer sonido\n    msgBuzzer = { payload: { \"on_ms\": on_ms, \"off_ms\": off_ms, \"repeat\": repeat } };\n}\n\nfunction formatTime(s) {\n    if (s < 0) s = 0;\n    let m = Math.floor(s / 60);\n    let ss = s % 60;\n    return (\"0\" + m).slice(-2) + \":\" + (\"0\" + ss).slice(-2);\n}\n\n// ============================================================\n// GUARDAR ESTADO Y GENERAR SALIDAS\n// ============================================================\nflow.set(\"pomodoroState\", state);\nflow.set(\"workRemaining\", workRemaining);\nflow.set(\"breakRemaining\", breakRemaining);\nflow.set(\"breakPaused\", breakPaused);\nflow.set(\"breakPresenceHold\", breakPresenceHold);\nflow.set(\"cyclesToday\", cyclesToday);\nflow.set(\"cyclesSinceBreak\", cyclesSinceBreak);\nflow.set(\"minutesWorkedToday\", minutesWorkedToday);\n\n// Estado visual\nlet stateStr = state;\nlet timeStr = formatTime(state === \"BREAK\" ? breakRemaining : workRemaining);\nlet icon = \"⚪\";\nlet stateLabel = \"Esperando\";\n\nswitch (state) {\n    case \"WORK\":\n        icon = \"🟢\";\n        stateLabel = \"Trabajando\";\n        break;\n    case \"BREAK\":\n        icon = isLongBreak ? \"💙\" : \"🔵\";\n        stateLabel = isLongBreak ? \"Descanso largo\" : \"Descanso corto\";\n        if (breakPaused) stateLabel += \" (pausado)\";\n        break;\n    case \"EARLY_LEAVE\":\n        icon = \"🟠\";\n        stateLabel = \"Pausado\";\n        break;\n    case \"IDLE\":\n    default:\n        icon = \"⚪\";\n        stateLabel = \"Esperando\";\n        break;\n}\n\n// Agregar modo DND al estado\nif (doNotDisturb) {\n    let minutesLeft = Math.ceil((dndUntil - Date.now()) / 60000);\n    stateLabel += ` 🔕(${minutesLeft}m)`;\n}\n\nmsgUi = { payload: `${icon} ${stateLabel} | ${timeStr}` };\n\n// Progreso\nlet percentage = 0;\nif (state === \"WORK\" || state === \"EARLY_LEAVE\") {\n    percentage = WORK_SECONDS > 0 ? (1 - workRemaining / WORK_SECONDS) * 100 : 0;\n} else if (state === \"BREAK\") {\n    let total = isLongBreak ? LONG_BREAK_SECONDS : BREAK_SECONDS;\n    percentage = total > 0 ? (1 - breakRemaining / total) * 100 : 0;\n}\nmsgGauge = { payload: Math.round(percentage) };\n\n// Ciclos con indicador de progreso a long break\nlet cyclesText = `${cyclesToday} ciclos`;\nif (cyclesSinceBreak > 0) {\n    cyclesText += ` (${cyclesSinceBreak}/${CYCLES_BEFORE_LONG_BREAK} → descanso largo)`;\n}\nmsgCycles = { payload: cyclesText };\n\n// --- Salida 7: Estadísticas ---\nlet msgStats = {\n    payload: `⏱️ ${minutesWorkedToday} min trabajados hoy`\n};\n\nreturn [\n    msgLcd,         // 1: LCD\n    msgBuzzer,      // 2: Buzzer\n    msgUi,          // 3: Estado\n    msgGauge,       // 4: Progreso\n    msgCycles,      // 5: Ciclos\n    msgNotification,// 6: Notificaciones\n    msgStats        // 7: Estadísticas (NUEVO)\n];",
        "outputs": 7,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 680,
        "wires": [
            [
                "57cd72340cd463a7"
            ],
            [
                "81f7d152865b21e8"
            ],
            [
                "9cb6982100c85dfa"
            ],
            [
                "d154e92b0921232e"
            ],
            [
                "22613af6a26b9c5f"
            ],
            [
                "786db02561821234"
            ],
            [
                "8064d46f1c8ce466"
            ]
        ]
    },
    {
        "id": "57cd72340cd463a7",
        "type": "mqtt out",
        "z": "a9265bf97bf9ded4",
        "name": "Enviar LCD",
        "topic": "pomodoro/actuador/lcd",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9260a17b9850f466",
        "x": 1110,
        "y": 560,
        "wires": []
    },
    {
        "id": "81f7d152865b21e8",
        "type": "mqtt out",
        "z": "a9265bf97bf9ded4",
        "name": "Enviar a Buzzer",
        "topic": "pomodoro/actuador/buzzer",
        "qos": "",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9260a17b9850f466",
        "x": 1120,
        "y": 620,
        "wires": []
    },
    {
        "id": "9cb6982100c85dfa",
        "type": "ui-text",
        "z": "a9265bf97bf9ded4",
        "group": "2c8997ef75109723",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Pomodoro",
        "label": "Estado Actual",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "value": "payload",
        "valueType": "msg",
        "x": 1130,
        "y": 760,
        "wires": []
    },
    {
        "id": "d66ac65e1c94f77d",
        "type": "ui-text",
        "z": "a9265bf97bf9ded4",
        "group": "49cd94a87fe8748c",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "PIR",
        "label": "Lectura PIR",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "value": "payload",
        "valueType": "msg",
        "x": 850,
        "y": 420,
        "wires": []
    },
    {
        "id": "b01a295f9d1a9d44",
        "type": "ui-gauge",
        "z": "a9265bf97bf9ded4",
        "name": "Distance",
        "group": "49cd94a87fe8748c",
        "order": 1,
        "value": "payload",
        "valueType": "msg",
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "gauge",
        "alwaysShowTitle": false,
        "floatingTitlePosition": "top-left",
        "units": "cm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c",
                "text": "",
                "textType": "label"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 860,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "c0aa84d171e33b74",
        "type": "ui-button",
        "z": "a9265bf97bf9ded4",
        "group": "2c8997ef75109723",
        "name": "Iniciar",
        "label": "Iniciar Pomodoro",
        "order": 6,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "CMD_START",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 390,
        "y": 920,
        "wires": [
            [
                "00556c5601b5270c"
            ]
        ]
    },
    {
        "id": "05efe4e091395aa9",
        "type": "ui-button",
        "z": "a9265bf97bf9ded4",
        "group": "2c8997ef75109723",
        "name": "Pausar",
        "label": "Pausar / Reanudar",
        "order": 5,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "CMD_PAUSE",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 380,
        "y": 960,
        "wires": [
            [
                "00556c5601b5270c"
            ]
        ]
    },
    {
        "id": "df38cc61e81f8cad",
        "type": "ui-button",
        "z": "a9265bf97bf9ded4",
        "group": "2c8997ef75109723",
        "name": "Cancelar",
        "label": "Cancelar Pomodoro",
        "order": 4,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "CMD_CANCEL",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 380,
        "y": 1020,
        "wires": [
            [
                "00556c5601b5270c"
            ]
        ]
    },
    {
        "id": "126c85286e27c583",
        "type": "ui-slider",
        "z": "a9265bf97bf9ded4",
        "group": "4d1e50679027e873",
        "name": "Tiempo de Trabajo",
        "label": "Minutos de Trabajo",
        "tooltip": "",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "all",
        "topic": "CONFIG_WORK",
        "topicType": "str",
        "thumbLabel": "true",
        "showTicks": "always",
        "min": 0,
        "max": "60",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "showTextField": false,
        "x": 630,
        "y": 1260,
        "wires": [
            [
                "00556c5601b5270c"
            ]
        ]
    },
    {
        "id": "145c9d05090cb167",
        "type": "ui-slider",
        "z": "a9265bf97bf9ded4",
        "group": "4d1e50679027e873",
        "name": "Tiempo de Descanso",
        "label": "Minutos de Descanso",
        "tooltip": "",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "all",
        "topic": "CONFIG_BREAK",
        "topicType": "str",
        "thumbLabel": "true",
        "showTicks": "always",
        "min": 0,
        "max": "20",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "showTextField": false,
        "x": 660,
        "y": 1320,
        "wires": [
            [
                "00556c5601b5270c"
            ]
        ]
    },
    {
        "id": "22613af6a26b9c5f",
        "type": "ui-text",
        "z": "a9265bf97bf9ded4",
        "group": "2c8997ef75109723",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Ciclos",
        "label": "Ciclos Completados Hoy",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "value": "payload",
        "valueType": "msg",
        "x": 1110,
        "y": 1060,
        "wires": []
    },
    {
        "id": "786db02561821234",
        "type": "ui-notification",
        "z": "a9265bf97bf9ded4",
        "ui": "98df90b8d4ba94d8",
        "position": "bottom right",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "3",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": false,
        "confirmText": "Confirm",
        "raw": false,
        "className": "",
        "name": "Sistema Pomodoro",
        "x": 1130,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "2fbe4af5bfc9d8f3",
        "type": "ui-switch",
        "z": "a9265bf97bf9ded4",
        "name": "Interruptor de Silencio",
        "label": "Habilitar Sonido (Buzzer)",
        "group": "4d1e50679027e873",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": false,
        "topic": "CONFIG_BUZZER",
        "topicType": "str",
        "style": "",
        "className": "",
        "layout": "row-spread",
        "clickableArea": "switch",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 420,
        "y": 860,
        "wires": [
            [
                "00556c5601b5270c"
            ]
        ]
    },
    {
        "id": "d154e92b0921232e",
        "type": "ui-progress",
        "z": "a9265bf97bf9ded4",
        "group": "2c8997ef75109723",
        "name": "Progreso del ciclo",
        "label": "Progreso del ciclo",
        "order": 1,
        "width": 0,
        "height": 0,
        "color": "",
        "className": "",
        "x": 1150,
        "y": 920,
        "wires": []
    },
    {
        "id": "52c239c3d3d1b6a1",
        "type": "ui-slider",
        "z": "a9265bf97bf9ded4",
        "group": "4d1e50679027e873",
        "name": "Tiempo de Descanso Largo",
        "label": "Minutos de Descanso Largo",
        "tooltip": "",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "all",
        "topic": "CONFIG_LONG_BREAK",
        "topicType": "str",
        "thumbLabel": "true",
        "showTicks": "always",
        "min": "10",
        "max": "45",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "showTextField": false,
        "x": 680,
        "y": 1380,
        "wires": [
            [
                "00556c5601b5270c"
            ]
        ]
    },
    {
        "id": "ca5edd96e003095b",
        "type": "ui-button",
        "z": "a9265bf97bf9ded4",
        "group": "4d1e50679027e873",
        "name": "Silencio 15min",
        "label": "🔕 Silencio 15min ",
        "order": 3,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "volume_off",
        "iconPosition": "left",
        "payload": "CMD_DND_15",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 360,
        "y": 1080,
        "wires": [
            [
                "00556c5601b5270c"
            ]
        ]
    },
    {
        "id": "b39acdfad8ca42d9",
        "type": "ui-button",
        "z": "a9265bf97bf9ded4",
        "group": "4d1e50679027e873",
        "name": "Cancelar Silencio",
        "label": "🔔 Activar Sonido  ",
        "order": 2,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "volume_up",
        "iconPosition": "left",
        "payload": "CMD_DND_OFF",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 370,
        "y": 1140,
        "wires": [
            [
                "00556c5601b5270c"
            ]
        ]
    },
    {
        "id": "57c65d8ab823898f",
        "type": "ui-button",
        "z": "a9265bf97bf9ded4",
        "group": "4d1e50679027e873",
        "name": "Saltar Descanso",
        "label": "⏭️ Saltar Descanso",
        "order": 1,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "skip_next",
        "iconPosition": "left",
        "payload": "CMD_SKIP_BREAK",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 380,
        "y": 1200,
        "wires": [
            [
                "00556c5601b5270c"
            ]
        ]
    },
    {
        "id": "8064d46f1c8ce466",
        "type": "ui-text",
        "z": "a9265bf97bf9ded4",
        "group": "b82bb73fec95945a",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Estadísticas",
        "label": "Hoy",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "value": "payload",
        "valueType": "msg",
        "x": 1150,
        "y": 1220,
        "wires": []
    },
    {
        "id": "9260a17b9850f466",
        "type": "mqtt-broker",
        "name": "Broker",
        "broker": "127.0.0.1",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "2c8997ef75109723",
        "type": "ui-group",
        "name": "Control y Estado",
        "page": "2bdf390d7e12f04d",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "49cd94a87fe8748c",
        "type": "ui-group",
        "name": "Sensores (Debug)",
        "page": "2bdf390d7e12f04d",
        "width": 6,
        "height": 1,
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "4d1e50679027e873",
        "type": "ui-group",
        "name": "Configuración",
        "page": "2bdf390d7e12f04d",
        "width": 6,
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "98df90b8d4ba94d8",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true,
        "allowInstall": false
    },
    {
        "id": "b82bb73fec95945a",
        "type": "ui-group",
        "name": "Estadisticas",
        "page": "2bdf390d7e12f04d",
        "width": 6,
        "height": 1,
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "2bdf390d7e12f04d",
        "type": "ui-page",
        "name": "Page 1",
        "ui": "98df90b8d4ba94d8",
        "path": "/page1",
        "icon": "home",
        "layout": "grid",
        "theme": "5b33c9d78f38e005",
        "breakpoints": [
            {
                "name": "Default",
                "px": 0,
                "cols": 3
            },
            {
                "name": "Tablet",
                "px": 576,
                "cols": 6
            },
            {
                "name": "Small Desktop",
                "px": 768,
                "cols": 9
            },
            {
                "name": "Desktop",
                "px": 1024,
                "cols": 12
            }
        ],
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "5b33c9d78f38e005",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "c2e92502f8bc43e0",
        "type": "global-config",
        "env": [],
        "modules": {
            "@flowfuse/node-red-dashboard": "1.29.0"
        }
    }
]